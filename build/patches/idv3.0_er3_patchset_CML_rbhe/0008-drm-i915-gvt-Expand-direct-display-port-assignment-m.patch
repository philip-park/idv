From 8315c6668a47915cb9da27c68433723941abaf26 Mon Sep 17 00:00:00 2001
From: Colin Xu <colin.xu@intel.com>
Date: Thu, 16 Apr 2020 13:40:03 +0800
Subject: [PATCH 08/24] drm/i915/gvt: Expand direct display port assignment
 mask to 64bit

i915 driver defines a larger I915_MAX_PORTS which can't be hold in 32bit
integer as the direct display port availability, selected mask and
assignment mask. In GEN9, the port number couldn't be so large, and
current implementation requries a 8-bit mask for each vGPU to hold the
port assignment.

Expand the availability and ownership to 64bit so that host port status
can be displayed correctly. Still keep using 8-bit mask for port
assignment.

Signed-off-by: Colin Xu <colin.xu@intel.com>
(cherry picked from commit 34dd889093fb147f1d76bf6a20a80e85fbe42743)
Signed-off-by: Colin Xu <colin.xu@intel.com>
(cherry picked from commit 6c460fe4501d95d69821c56d6f276135a232a0d6)
Signed-off-by: Colin Xu <colin.xu@intel.com>
---
 drivers/gpu/drm/i915/gvt/display.c  | 28 +++++++++++++++++++---------
 drivers/gpu/drm/i915/gvt/gvt.h      | 13 +++++++------
 drivers/gpu/drm/i915/gvt/handlers.c |  4 ++--
 drivers/gpu/drm/i915/gvt/vgpu.c     |  4 ++--
 drivers/gpu/drm/i915/i915_sysfs.c   | 14 +++++++-------
 5 files changed, 37 insertions(+), 26 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/display.c b/drivers/gpu/drm/i915/gvt/display.c
index 0bb3061d85d0..6f3beda79fad 100644
--- a/drivers/gpu/drm/i915/gvt/display.c
+++ b/drivers/gpu/drm/i915/gvt/display.c
@@ -702,7 +702,7 @@ static void intel_gvt_connector_change_work(struct work_struct *w)
 
 	if (!idr_is_empty(&gvt->vgpu_idr)) {
 		mutex_unlock(&gvt->lock);
-		gvt_dbg_dpy("Available port mask %08x and selected mask 0x%016llx "
+		gvt_dbg_dpy("Available port mask %016llx and selected mask 0x%016llx "
 			    "unchanged due to hotplug after vGPU creation\n",
 			    gvt->avail_disp_port_mask, gvt->sel_disp_port_mask);
 		return;
@@ -719,7 +719,7 @@ static void intel_gvt_connector_change_work(struct work_struct *w)
 
 		port_ext = intel_gvt_external_disp_id_from_port(port);
 		// Available port is set in corresponding port position.
-		gvt->avail_disp_port_mask |= (port_ext << port * 4);
+		gvt->avail_disp_port_mask |= intel_gvt_port_to_mask_bit(port_ext, port);
 		// Available port is assigned to vGPU in sequence.
 		gvt->sel_disp_port_mask |= ((1 << port) << id * 8);
 		++id;
@@ -1099,6 +1099,16 @@ enum port intel_gvt_port_from_external_disp_id(u8 port_id)
 	return port;
 }
 
+u64 intel_gvt_port_to_mask_bit(u8 port_sel, enum port port)
+{
+	if (port > PORT_A + 15) {
+		gvt_err("PORT_%c exceeds maximum that can be held in u64\n",
+			port_name(port));
+		return 0;
+	}
+	return ((u64)port_sel << port * 4);
+}
+
 enum pipe intel_gvt_pipe_from_port(struct drm_i915_private *dev_priv,
 				   enum port port)
 {
@@ -2179,7 +2189,7 @@ static void intel_gvt_switch_display_work(struct work_struct *w)
 }
 
 void intel_gvt_store_vgpu_display_owner(struct drm_i915_private *dev_priv,
-					u32 disp_owner)
+					u64 disp_owner)
 {
 	struct intel_gvt *gvt = dev_priv->gvt;
 	struct intel_vgpu *vgpu = NULL;
@@ -2187,7 +2197,7 @@ void intel_gvt_store_vgpu_display_owner(struct drm_i915_private *dev_priv,
 	enum pipe pipe = INVALID_PIPE;
 	enum port port = PORT_NONE;
 	u8 owner;
-	u32 owner_mask = 0;
+	u64 owner_mask = 0;
 	bool valid_owner = true, vgpu_found;
 
 	mutex_lock(&gvt->lock);
@@ -2228,7 +2238,6 @@ void intel_gvt_store_vgpu_display_owner(struct drm_i915_private *dev_priv,
 
 		if (owner != 0) {
 			if (vgpu_found) {
-				// port_assign = intel_gvt_external_disp_id_from_port(port);
 				if (!(((gvt->sel_disp_port_mask >> (owner - 1) * 8) & 0xFF) & (1 << port))) {
 					gvt_err("PORT_%c(%d) isn't assigned to vGPU-%d\n",
 						port_name(port),
@@ -2296,11 +2305,11 @@ void intel_gvt_store_vgpu_display_mask(struct drm_i915_private *dev_priv,
 			mask_vgpu = (mask >> id * 8) & 0xFF;
 			if (mask_vgpu == 0)
 				continue;
-			for (port = PORT_A; port < I915_MAX_PORTS; port++) {
+			for (port = PORT_A; port < (PORT_A + 8); port++) {
 				if (mask_vgpu & (1 << port)) {
 					port_sel = intel_gvt_external_disp_id_from_port(port);
 					if (port_sel == 0 ||
-					    !(gvt->avail_disp_port_mask & (port_sel << port * 4))) {
+					    !(gvt->avail_disp_port_mask & intel_gvt_port_to_mask_bit(port_sel, port))) {
 						gvt_err("Selected PORT_%c for vGPU-%d isn't available\n",
 							port_name(port), id + 1);
 						valid_mask = false;
@@ -2378,7 +2387,7 @@ void intel_gvt_store_vgpu_display_switch(struct drm_i915_private *dev_priv,
  *    The common usage is to switch display to next vGPU on receiving deactivate
  *    or DMLR.
  */
-u32 intel_vgpu_display_find_owner(struct intel_vgpu *vgpu, bool reset, bool next)
+u64 intel_vgpu_display_find_owner(struct intel_vgpu *vgpu, bool reset, bool next)
 {
 	struct intel_gvt *gvt = vgpu->gvt;
 	struct intel_vgpu *other_v;
@@ -2386,7 +2395,8 @@ u32 intel_vgpu_display_find_owner(struct intel_vgpu *vgpu, bool reset, bool next
 	struct intel_vgpu_display_path *disp_path = NULL, *n;
 	enum pipe pipe = INVALID_PIPE;
 	enum port port = PORT_NONE;
-	u32 id, owner_id, available, new, candidate;
+	u32 id, owner_id, available, candidate;
+	u64 new;
 	bool found = false;
 
 	new = gvt->disp_owner;
diff --git a/drivers/gpu/drm/i915/gvt/gvt.h b/drivers/gpu/drm/i915/gvt/gvt.h
index 2ba872a42d77..4a555bccc2e6 100644
--- a/drivers/gpu/drm/i915/gvt/gvt.h
+++ b/drivers/gpu/drm/i915/gvt/gvt.h
@@ -396,7 +396,7 @@ struct intel_gvt {
 	struct work_struct switch_display_work;
 
 	/*
-	 * Available display port mask for PORT_A to PORT_A+7 (low to high).
+	 * Available display port mask for PORT_A to I915_MAX_PORTS (low to high).
 	 * Each hex digit represents the availability of corresponding port.
 	 * 0: Port isn't available.
 	 * x: Port x is available.
@@ -407,7 +407,7 @@ struct intel_gvt {
 	 *      PORT_C: Available.
 	 *      PORT_D: Available.
 	 */
-	u32 avail_disp_port_mask;
+	u64 avail_disp_port_mask;
 
 	/*
 	 * Bit mask of selected ports for vGPU-1 to vGPU-8 (low to high).
@@ -425,7 +425,7 @@ struct intel_gvt {
 	u64 sel_disp_port_mask;
 
 	/*
-	 * Display owner for PORT_A to PORT_A+7 (low to high).
+	 * Display owner for PORT_A to I915_MAX_PORTS (low to high).
 	 * Each hex digit represents the owner vGPU id of corresponding port.
 	 * 0: display N/A or owned by host.
 	 * x: display owned by vGPU x.
@@ -435,7 +435,7 @@ struct intel_gvt {
 	 *      PORT_C: N/A or owned by host.
 	 *      PORT_D: Owned by vGPU-2.
 	 */
-	u32 disp_owner;
+	u64 disp_owner;
 
 	/*
 	 * Auto switch disp, it contains:
@@ -801,17 +801,18 @@ void intel_gvt_debugfs_clean(struct intel_gvt *gvt);
 
 u8 intel_gvt_external_disp_id_from_port(enum port port);
 enum port intel_gvt_port_from_external_disp_id(u8 port_id);
+u64 intel_gvt_port_to_mask_bit(u8 port_sel, enum port port);
 enum pipe intel_gvt_pipe_from_port(
 	struct drm_i915_private *dev_priv, enum port port);
 enum port intel_gvt_port_from_pipe(
 	struct drm_i915_private *dev_priv, enum pipe pipe);
 void intel_gvt_store_vgpu_display_owner(
-	struct drm_i915_private *dev_priv, u32 disp_owner);
+	struct drm_i915_private *dev_priv, u64 disp_owner);
 void intel_gvt_store_vgpu_display_mask(struct drm_i915_private *dev_priv,
 				       u64 mask);
 void intel_gvt_store_vgpu_display_switch(struct drm_i915_private *dev_priv,
 					 bool auto_switch);
-u32 intel_vgpu_display_find_owner(struct intel_vgpu *vgpu, bool reset, bool next);
+u64 intel_vgpu_display_find_owner(struct intel_vgpu *vgpu, bool reset, bool next);
 void intel_vgpu_display_set_foreground(struct intel_vgpu *vgpu, bool reset);
 
 void intel_gvt_init_display(struct intel_gvt *gvt);
diff --git a/drivers/gpu/drm/i915/gvt/handlers.c b/drivers/gpu/drm/i915/gvt/handlers.c
index a47bf139de06..8bec33ba5976 100644
--- a/drivers/gpu/drm/i915/gvt/handlers.c
+++ b/drivers/gpu/drm/i915/gvt/handlers.c
@@ -1658,13 +1658,13 @@ static int pvinfo_mmio_write(struct intel_vgpu *vgpu, unsigned int offset,
 
 			intel_vgpu_display_set_foreground(vgpu, true);
 			if (!foreground && READ_ONCE(gvt->disp_auto_switch)) {
-				u32 owner = 0;
+				u64 owner = 0;
 
 				mutex_lock(&gvt->sw_in_progress);
 				owner = intel_vgpu_display_find_owner(vgpu, false, false);
 				if (owner != gvt->disp_owner) {
 					gvt->disp_owner = owner;
-					gvt_dbg_dpy("Schedule display owner changed to 0x%08x "
+					gvt_dbg_dpy("Schedule display owner changed to 0x%016llx "
 						    "due to DISPLAY_READY of vGPU-%d\n",
 						    gvt->disp_owner, vgpu->id);
 					queue_work(system_unbound_wq,
diff --git a/drivers/gpu/drm/i915/gvt/vgpu.c b/drivers/gpu/drm/i915/gvt/vgpu.c
index 61c456403da5..01c9a1d6c299 100644
--- a/drivers/gpu/drm/i915/gvt/vgpu.c
+++ b/drivers/gpu/drm/i915/gvt/vgpu.c
@@ -242,13 +242,13 @@ void intel_gvt_deactivate_vgpu(struct intel_vgpu *vgpu)
 
 	intel_vgpu_display_set_foreground(vgpu, false);
 	if (READ_ONCE(gvt->disp_auto_switch)) {
-		u32 owner = 0;
+		u64 owner = 0;
 
 		mutex_lock(&gvt->sw_in_progress);
 		owner = intel_vgpu_display_find_owner(vgpu, true, true);
 		if (owner != gvt->disp_owner) {
 			gvt->disp_owner = owner;
-			gvt_dbg_dpy("Schedule display owner changed to 0x%08x due to "
+			gvt_dbg_dpy("Schedule display owner changed to 0x%016llx due to "
 				    "deactivate of vGPU-%d\n",
 				    gvt->disp_owner, vgpu->id);
 			queue_work(system_unbound_wq, &gvt->switch_display_work);
diff --git a/drivers/gpu/drm/i915/i915_sysfs.c b/drivers/gpu/drm/i915/i915_sysfs.c
index d1931f888112..25556e652ece 100644
--- a/drivers/gpu/drm/i915/i915_sysfs.c
+++ b/drivers/gpu/drm/i915/i915_sysfs.c
@@ -623,7 +623,7 @@ static ssize_t gvt_disp_ports_status_show(
 	if (!buf_size)
 		return count_total;
 
-	count = snprintf(buf, buf_size, "Available display ports: 0x%08x\n",
+	count = snprintf(buf, buf_size, "Available display ports: 0x%016llx\n",
 			 gvt->avail_disp_port_mask);
 	buf_size -= count;
 	count_total += count;
@@ -633,7 +633,7 @@ static ssize_t gvt_disp_ports_status_show(
 
 	for (port = PORT_A; port < I915_MAX_PORTS; port++) {
 		port_sel = intel_gvt_external_disp_id_from_port(port);
-		if (gvt->avail_disp_port_mask & (port_sel << port * 4)) {
+		if (gvt->avail_disp_port_mask & intel_gvt_port_to_mask_bit(port_sel, port)) {
 			count = snprintf(buf, buf_size, "  ( PORT_%c(%d) )\n",
 					 port_name(port), port_sel);
 			buf_size -= count;
@@ -714,7 +714,7 @@ static ssize_t gvt_disp_ports_status_show(
 	}
 
 	count = snprintf(buf, buf_size,
-			 "Display ports ownership: 0x%08x\n",
+			 "Display ports ownership: 0x%016llx\n",
 			 gvt->disp_owner);
 	buf_size -= count;
 	count_total += count;
@@ -747,7 +747,7 @@ static ssize_t gvt_disp_ports_status_show(
 
 	for (port = PORT_A; port < I915_MAX_PORTS; port++) {
 		port_sel = intel_gvt_external_disp_id_from_port(port);
-		if (gvt->avail_disp_port_mask & (port_sel << port * 4)) {
+		if (gvt->avail_disp_port_mask & intel_gvt_port_to_mask_bit(port_sel, port)) {
 			count = snprintf(buf, buf_size, "  ( PORT_%c(%d) ",
 					 port_name(port), port_sel);
 			buf_size -= count;
@@ -781,7 +781,7 @@ static ssize_t gvt_disp_ports_owner_show(
 	struct drm_i915_private *dev_priv = kdev_minor_to_i915(kdev);
 
 	return snprintf(buf, PAGE_SIZE,
-			"Display ports ownership: 0x%08x\n",
+			"Display ports ownership: 0x%016llx\n",
 			dev_priv->gvt->disp_owner);
 }
 
@@ -790,10 +790,10 @@ static ssize_t gvt_disp_ports_owner_store(
 	const char *buf, size_t count)
 {
 	struct drm_i915_private *dev_priv = kdev_minor_to_i915(kdev);
-	u32 val;
+	u64 val;
 	ssize_t ret;
 
-	ret = kstrtou32(buf, 0, &val);
+	ret = kstrtou64(buf, 0, &val);
 	if (ret)
 		return ret;
 
-- 
2.17.1

